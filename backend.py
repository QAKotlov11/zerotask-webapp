from fastapi import FastAPI, File, Form, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
import json
from datetime import datetime
import uuid

app = FastAPI(title="ZeroTask API", version="1.0.0")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è WebApp
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:8003", "https://alekseykotlov.github.io"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
tasks = {}

@app.get("/")
async def root():
    return {"message": "ZeroTask API —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ"}

@app.get("/api/tasks/")
async def get_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
    return {"tasks": list(tasks.values())}

@app.post("/api/tasks/create/")
async def create_task(
    telegram_id: int = Form(...),
    description: str = Form(""),
    image: UploadFile = File(None)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
    try:
        task_id = str(uuid.uuid4())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        task_data = {
            "id": task_id,
            "telegram_id": telegram_id,
            "description": description,
            "image_filename": image.filename if image else None,
            "created_at": datetime.now().isoformat(),
            "status": "pending"
        }
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        if image:
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ñ–∞–π–ª—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ
            image_path = f"uploads/{task_id}_{image.filename}"
            task_data["image_path"] = image_path
        
        tasks[task_id] = task_data
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ –≤ AI —Å–µ—Ä–≤–∏—Å
        # –ù–∞–ø—Ä–∏–º–µ—Ä, OpenAI GPT-4 –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        
        return JSONResponse(
            status_code=201,
            content={
                "id": task_id,
                "message": "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
                "telegram_id": telegram_id
            }
        )
        
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}"}
        )

@app.get("/api/tasks/{task_id}")
async def get_task(task_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID"""
    if task_id not in tasks:
        return JSONResponse(
            status_code=404,
            content={"error": "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        )
    return tasks[task_id]

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "tasks_count": len(tasks)
    }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8002)
