import os
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from django.core.management import execute_from_command_line
import django
import sys
from asgiref.sync import sync_to_async

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'zerotask_backend.settings')
django.setup()

# –ò–º–ø–æ—Ä—Ç—ã Django –º–æ–¥–µ–ª–µ–π
from bot.models import User, Subscription, Task
from bot.serializers import UserSerializer, TaskSerializer
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

from config import *

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

class MyGDZBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
            
            user = update.effective_user
            chat_id = update.effective_chat.id
            
            logger.info(f"–°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id={user.id}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user, created = await sync_to_async(User.objects.get_or_create)(
                telegram_id=user.id,
                defaults={
                    'username': user.username,
                    'first_name': user.first_name,
                    'chat_id': chat_id,
                }
            )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'—Å–æ–∑–¥–∞–Ω' if created else '–ø–æ–ª—É—á–µ–Ω'}: {db_user.id}")
            
            if not created:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                db_user.username = user.username
                db_user.first_name = user.first_name
                db_user.chat_id = chat_id
                await sync_to_async(db_user.save)()
                logger.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
            logger.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await self.show_main_menu(update, context, db_user)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if update.message:
                await update.message.reply_text(error_text)
            elif update.callback_query:
                await update.callback_query.edit_message_text(error_text)
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: User):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        has_subscription = await sync_to_async(lambda: user.has_active_subscription)()
        
        if has_subscription:
            subscription = await sync_to_async(lambda: user.active_subscription)()
            end_date = subscription.end_date.strftime('%d.%m.%Y')
            text = f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç MyGDZ ‚Äî –ø–æ–º–æ–≥—É —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç—É.\n\nüìå –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {end_date}"
            
            keyboard = [
                [InlineKeyboardButton("üß† –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="solve_task")],
                [InlineKeyboardButton("üîê –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")],
                [InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", callback_data="channel")],
                [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
            ]
        else:
            trials_left = await sync_to_async(lambda: user.trials_left)()
            text = f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç MyGDZ ‚Äî –ø–æ–º–æ–≥—É —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç—É.\nüìå –î–æ—Å—Ç—É–ø–Ω–æ {trials_left} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –¥–∞–ª—å—à–µ ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ —Å –±–µ–∑–ª–∏–º–∏—Ç–æ–º."
            
            keyboard = [
                [InlineKeyboardButton("üß† –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="solve_task")],
                [InlineKeyboardButton("üîê –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscription")],
                [InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", callback_data="channel")],
                [InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text=text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text=text, reply_markup=reply_markup)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user = await sync_to_async(User.objects.get)(telegram_id=query.from_user.id)
        
        if query.data == "solve_task":
            await self.show_solve_task_menu(update, context, user)
        elif query.data == "subscription":
            await self.show_subscription_menu(update, context, user)
        elif query.data == "channel":
            await self.show_channel_menu(update, context, user)
        elif query.data == "support":
            await self.show_contact_support(update, context, user)
        elif query.data == "back_to_menu":
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            user = await sync_to_async(User.objects.get)(telegram_id=query.from_user.id)
            await self.show_main_menu(update, context, user)
        elif query.data == "open_webapp":
            await self.open_webapp(update, context, user)
        elif query.data == "buy_subscription":
            await self.show_payment_menu(update, context, user)
        elif query.data == "cancel_auto_renewal":
            await self.cancel_auto_renewal(update, context, user)


    
    async def show_solve_task_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: User):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        query = update.callback_query
        
        has_subscription = await sync_to_async(lambda: user.has_active_subscription)()
        
        if has_subscription:
            subscription = await sync_to_async(lambda: user.active_subscription)()
            end_date = subscription.end_date.strftime('%d.%m.%Y')
            text = f"üìå –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {end_date}.\n\n–ó–∞–≥—Ä—É–∂–∞–π —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ ‚Äî –ø–µ—Ä–µ–π–¥—ë–º –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
            
            keyboard = [
                [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL_DEV))],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        else:
            trials_left = await sync_to_async(lambda: user.trials_left)()
            if trials_left > 0:
                text = f"–£ —Ç–µ–±—è –µ—Å—Ç—å {trials_left} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –û—Å—Ç–∞–ª–æ—Å—å: {trials_left}.\n\nüì∏ –ó–∞–≥—Ä—É–∂–∞–π —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–æ–¥–∏ —Ç–µ–∫—Å—Ç ‚Äî –ø–µ—Ä–µ–π–¥—ë–º –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
                
                keyboard = [
                    [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL_DEV))],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
                ]
            else:
                text = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n\n–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∞–π –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ 30 –¥–Ω–µ–π."
                
                keyboard = [
                    [InlineKeyboardButton("üîê –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
                ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    
    async def show_subscription_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: User):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
        query = update.callback_query
        
        has_subscription = await sync_to_async(lambda: user.has_active_subscription)()
        
        if has_subscription:
            subscription = await sync_to_async(lambda: user.active_subscription)()
            end_date = subscription.end_date.strftime('%d.%m.%Y')
            auto_renewal = "–≤–∫–ª—é—á–µ–Ω–æ" if subscription.auto_renewal else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
            
            text = f"üîê –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {end_date}.\n\nüìå –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {auto_renewal}"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 30 –¥–Ω–µ–π", callback_data="buy_subscription")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ", callback_data="cancel_auto_renewal")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        else:
            text = f"""üîê –ü–æ–¥–ø–∏—Å–∫–∞ MyGDZ
‚Äî –ë–µ–∑–ª–∏–º–∏—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á
‚Äî –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å –ø–æ—à–∞–≥–æ–≤—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏
‚Äî –§–æ—Ä–º–∞—Ç PNG —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
‚Äî –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á –≤ —Ç–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ

–°—Ç–æ–∏–º–æ—Å—Ç—å: {SUBSCRIPTION_PRICE} ‚ÇΩ / {SUBSCRIPTION_DAYS} –¥–Ω–µ–π"""
            
            keyboard = [
                [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", callback_data="buy_subscription")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    
    async def show_channel_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: User):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞–Ω–∞–ª–∞"""
        query = update.callback_query
        
        text = """üì¢ –ù–∞—à –∫–∞–Ω–∞–ª –∏ —Å–∞–π—Ç:
‚Äî –°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
‚Äî –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Äî –ê–∫—Ü–∏–∏ –∏ –±–æ–Ω—É—Å—ã –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        
        keyboard = [
            [InlineKeyboardButton("üì≤ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url="https://t.me/your_channel")],
            [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url="https://your-website.com")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    

    
    async def show_payment_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: User):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
        query = update.callback_query
        
        text = """üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏

–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
- –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 1111 1111 1111 1111
- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –ª—é–±–æ–π –±—É–¥—É—â–∏–π
- CVV: –ª—é–±–æ–π

–í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YooKassa."""
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    
    async def cancel_auto_renewal(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: User):
        """–û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        query = update.callback_query
        
        has_subscription = await sync_to_async(lambda: user.has_active_subscription)()
        
        if has_subscription:
            subscription = await sync_to_async(lambda: user.active_subscription)()
            subscription.auto_renewal = False
            await sync_to_async(subscription.save)()
            
            text = "‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        else:
            text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    

    async def show_contact_support(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: User):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å FAQ"""
        query = update.callback_query
        
        text = """üí¨ –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

1Ô∏è‚É£ –ö–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏? ‚Äî –ß–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É¬ª ‚Üí ¬´–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ¬ª.
2Ô∏è‚É£ –ö–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–¥–∞—á –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è? ‚Äî –§–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç.
3Ô∏è‚É£ –ß—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ? ‚Äî –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ, —Ñ–æ—Ä–º—É–ª—ã, –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç.
4Ô∏è‚É£ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞? ‚Äî 30 –¥–Ω–µ–π –±–µ–∑–ª–∏–º–∏—Ç–∞ –Ω–∞ —Ä–µ—à–µ–Ω–∏—è.
5Ô∏è‚É£ –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ? ‚Äî –í —Ä–∞–∑–¥–µ–ª–µ ¬´–ü–æ–¥–ø–∏—Å–∫–∞¬ª –∫–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ¬ª.

üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞ MyGDZ
–†–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10:00 –¥–æ 20:00 –ú–°–ö."""
        
        keyboard = [
            [InlineKeyboardButton("üì≤ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/your_support_bot")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup)

    async def open_webapp(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: User):
        """–û—Ç–∫—Ä—ã—Ç—å WebApp"""
        query = update.callback_query
        
        text = "üöÄ –û—Ç–∫—Ä—ã–≤–∞—é –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É MyGDZ

üì± –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîß –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ù–∞–∂–º–∏—Ç–µ "üß† –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É"
2. –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç
4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ!

üí¨ –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""
        
        await update.message.reply_text(help_text)
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
        active_task = await sync_to_async(lambda: Task.objects.filter(
            user__telegram_id=user.id,
            status='pending'
        ).first)()
        
        if active_task:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
            await self.process_task_solution(update, context, active_task, text)
        else:
            # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.")
    
    async def process_task_solution(self, update: Update, context: ContextTypes.DEFAULT_TYPE, task: Task, user_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        user = update.effective_user
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ OpenAI
            response = client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á. –î–∞–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ø–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏."},
                    {"role": "user", "content": f"–ó–∞–¥–∞—á–∞: {task.description}\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_text}\n\n–†–µ—à–∏ –∑–∞–¥–∞—á—É –ø–æ—à–∞–≥–æ–≤–æ —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏."}
                ],
                max_tokens=OPENAI_MAX_TOKENS,
                temperature=OPENAI_TEMPERATURE
            )
            
            solution = response.choices[0].message.content
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            task.solution = solution
            task.status = 'completed'
            await sync_to_async(task.save)()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ —Ä–µ—à–µ–Ω–∞!\n\n{solution}",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ MyGDZ...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = MyGDZBot()
    bot.run()
